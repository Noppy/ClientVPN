AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Ohio VPC
#----------------------------------------------
Parameters:
  #------------------
  InternetAccess:
    Description: (required)If this vpc is required internet access, InternetAccess is true.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must specify true or false.
  #------------------
  VpcInternalDnsName: 
    Type: String
    AllowedPattern: "^([a-z0-9]+(-[a-z0-9]+)*\\.?)+\\.$"
    Default: ohio.local.
    ConstraintDescription: You can use letters (abc), numbers (123) and dashes/hyphens, and the last character is '.'.
  VpcName:
    Description: Name for the VPC
    Type: String
    Default: OhioVPC
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  VpcCidr:
    Description: CIDR Block for the  VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.2.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.0.0/16
  DnsSupport:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  DnsHostnames:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  #---
  Subnet1Name:
    Description: Name for the Public Subnet 1
    Type: String
    Default: PrivateSub1
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  Subnet1Cidr:
    Description: CIDR Block for the  pubulic subnet 1
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.2.64.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  Subnet2Name:
    Description: Name for the Public Subnet 2
    Type: String
    Default: PrivateSub2
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  Subnet2Cidr:
    Description: CIDR Block for the  pubulic subnet 2
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.2.128.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  VyOSImageID:
    Type: String
    Default: ami-5dba9a38
  VyOSInstanceType:
    Type: String
    Default: c4.2xlarge
  BastionImageID:
    Type: String
    Default: ami-5dba9a38
  BastionInstanceType:
    Type: String
    Default: t2.micro
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: (required) Name of an existing EC2 key pair
  #------------------
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      -
        Label:
          default: "VPC Configurations"
        Parameters:
          - InternetAccess
          - VpcInternalDnsName
          - VpcName
          - VpcCidr
          - DnsSupport
          - DnsHostnames
      -
        Label:
          default: "Subnets Configurations"
        Parameters:
          - Subnet1Name
          - Subnet1Cidr
          - Subnet2Name
          - Subnet2Cidr
      -
        Label:
          default: "VyOS Instances Configurations"
        Parameters:
          - VyOSImageID
          - VyOSInstanceType
          - KeyName
      -
        Label:
          default: "Bastion Instances Configurations"
        Parameters:
          - BastionImageID
          - BastionInstanceType
#----------------------------------------------
Conditions: 
  CheckInternetAccess: !Equals [ !Ref InternetAccess, true ]
#----------------------------------------------
Resources:
  #------------------ VPC FlowLog Role
  FlowlogRole:
    Type: "AWS::IAM::Role"
    Properties: 
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: "Flowlog"
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource: "*"
  #------------------ VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: !Ref DnsSupport
      EnableDnsHostnames: !Ref DnsHostnames
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}
  #------------------ Internet GW
  Igw:
    Type: AWS::EC2::InternetGateway
    Condition: CheckInternetAccess
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-IGW
  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CheckInternetAccess
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc
    DependsOn:
      - Vpc
      - Igw
  #------------------ Subnet
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Subnet1Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch:
        Fn::If:
          - CheckInternetAccess
          - true
          - false
      Tags:
        - Key: Name
          Value: !Sub ${Subnet1Name}
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Subnet2Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch:
        Fn::If:
          - CheckInternetAccess
          - true
          - false
      Tags:
        - Key: Name
          Value: !Sub ${Subnet2Name}
  #------------------ Route Table
  #----------  VPC Public Route Table1
  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-RouteTable1
  VpcInternetRote1:
    Type: AWS::EC2::Route
    Condition: CheckInternetAccess
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
    DependsOn:
      - AttachIgw
  InternetRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VyOS3
    DependsOn:
      - VyOS3
  #----------  VPC Public Route Table2
  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-RouteTable2
  VpcInternetRote2:
    Type: AWS::EC2::Route
    Condition: CheckInternetAccess
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
    DependsOn:
      - AttachIgw
  InternetRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VyOS4
    DependsOn:
      - VyOS4
  #---- Attache to subnets in the  VPC
  RouteTableAssociationSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable1
  RouteTableAssociationSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable2
  #------------------ Local Domain Name
  VpcInternalDns:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: "Resource DNS for  VPC"
      Name: !Ref VpcInternalDnsName
      VPCs:
        - VPCId: !Ref Vpc
          VPCRegion: !Ref AWS::Region
  #------------------ Cloudwatch log for Flowlog
  VPCFlowlog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowlogRole.Arn
      LogGroupName: !Sub VPCFlowLogs/${VpcName}
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL
  #------------------ VPC Endpoint
  #------------------ Security Groups
  VPCEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: VPCEndpointSG
      GroupDescription: Allow HTTPS(443)
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: VPCEndpointSG
  SsmEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      PrivateDnsEnabled: yes
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG
  Ec2MessagesEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcEndpointType: Interface
      PrivateDnsEnabled: yes
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG
  SsmMessagesEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcEndpointType: Interface
      PrivateDnsEnabled: yes
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG
  S3VpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref RouteTable1
        - !Ref RouteTable2
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              # Allow connections to the Amazon Linux yum repositories
              - "arn:aws:s3:::packages.*.amazonaws.com/*"
              - "arn:aws:s3:::repo.*.amazonaws.com/*"
              # Allow connections to the Amazon Linux2 yum repositories
              - "arn:aws:s3:::amazonlinux.*.amazonaws.com/*"
              # Allow SSM
              - !Sub "arn:aws:s3:::aws-ssm-${AWS::Region}/*"
              - !Sub "arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*"
              - !Sub "arn:aws:s3:::region-birdwatcher-prod/*"
              - !Sub "arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*"
  #------------------ VyOS
  #---- Security Group
  VyOSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: VyOSSG
      GroupDescription: For VyOS 
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/8
        -
          IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: VyOSSG
  #------------------ VyOS
  VyOSLunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: VyOSLunchTemplate
      LaunchTemplateData:
        ImageId: !Ref VyOSImageID
        InstanceType: !Ref VyOSInstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref VyOSSG
        Monitoring:
          Enabled: true
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              - Key: Name
                Value: VyOS
  VyOS3:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateName: VyOSLunchTemplate
        Version: !GetAtt VyOSLunchTemplate.LatestVersionNumber
      SubnetId: !Ref Subnet1
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: VyOS-3
  VyOS4:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateName: VyOSLunchTemplate
        Version: !GetAtt VyOSLunchTemplate.LatestVersionNumber
      SubnetId: !Ref Subnet2
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: VyOS-4
  #Bastion Instance-----------------
  #---SecurityGroup
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: BastionSG
      GroupDescription: For BastionSG 
      VpcId: !Ref Vpc
  #---IAM
  EC2BastionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  EC2BastionRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2BastionRole
      Path: "/"
      Roles:
        - !Ref EC2BastionRole
  #---
  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BastionImageID
      InstanceType: !Ref BastionInstanceType
      IamInstanceProfile: !Ref EC2BastionRoleInstanceProfile
      Monitoring: yes
      NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId: !Ref Subnet2
          GroupSet:
            - !Ref BastionSG
          #AssociatePublicIpAddress: true
      Tags:
        - Key: Name
          Value: Bastion
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update ALL rpms, and change hostname to Userfrendly name 
          yum -y update
          hostnamectl set-hostname Bastion

          # Setup AWS CLI
          sudo -u ec2-user aws configure set region ${AWS::Region}
          sudo -u ec2-user aws configure set output json
    DependsOn: S3VpcEndpoint
  BastionAutoRecovery:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: AutoRecovery for the Bastion
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
      - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:admin"
      Dimensions:
      - Name: InstanceId
        Value: !Ref Bastion
    DependsOn: Bastion
Outputs:
  #------------------ VPC
  VpcId:
    Description:  VPC ID
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  VpcCidr:
    Description:  VPC CIDR
    Value: !Ref VpcCidr
    Export:
      Name: !Sub "${AWS::StackName}-VpcCidr"
  #------------------ Subnet
  Subnet1Id:
    Description: Public Subnet1 ID in the  VPC
    Value: !Ref Subnet1
    Export:
      Name: !Sub "${AWS::StackName}-Subnet1Id"
  Subnet2Id:
    Description: Public Subnet2 ID in the  VPC
    Value: !Ref Subnet2
    Export:
      Name: !Sub "${AWS::StackName}-Subnet2Id"
  #------------------ route tables
  RouteTable1Id:
    Description: Route table1 for Public Subnet
    Value: !Ref RouteTable1
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable1Id"
  RouteTable2Id:
    Description: Route table2 for Public Subnet
    Value: !Ref RouteTable2
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable2Id"
  #------------------ Resource DNS name
  VpcInternalDnsName:
    Description: Resource DNS zone name in the  Vpc
    Value: !Ref VpcInternalDnsName
    Export:
      Name: !Sub ${AWS::StackName}-VpcInternalDnsName
  VpcInternalDnsId:
    Description: Resource DNS zone id in the  VPC
    Value: !Ref VpcInternalDns
    Export:
      Name: !Sub ${AWS::StackName}-VpcInternalDnsId
  VyOSSGId:
    Description: Security Group ID of VyOSSG
    Value: !Ref VyOSSG
    Export:
      Name: !Sub ${AWS::StackName}-VyOSSGId
  VyOS3Id:
    Description: VyoS-3 Instance ID
    Value: !Ref VyOS3
    Export:
      Name: !Sub ${AWS::StackName}-VyOS3Id
  VyOS4Id:
    Description: VyoS-4 Instance ID
    Value: !Ref VyOS4
    Export:
      Name: !Sub ${AWS::StackName}-VyOS4Id


